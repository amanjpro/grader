#!/bin/sh
  exec scala -cp jline-2.12.jar -save -feature "$0" "$@"
!#

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Amanj Sherwany - http://www.amanj.me
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import jline.console.ConsoleReader
import jline.console.completer.StringsCompleter
import scala.util.parsing.combinator._
import scala.collection.immutable.TreeMap
import sys.process._
import scala.io._
import java.io._
import scala.language.postfixOps








trait Result
case object Success extends Result
case object Fail extends Result

// ASTs
trait Command

case class Download(hw: String) extends Command
case class Set(hw: String) extends Command
case class Open(file: String) extends Command
case object Compile extends Command
case class Run(file: String) extends Command
case class Shell(command: String) extends Command
case class Next(steps: Int) extends Command
case class Previous(steps: Int) extends Command
case class Go(pos: Int) extends Command
case class ApplyToAll(command: String) extends Command
case class CpAll(src: String, dst: String) extends Command
case object Ls extends Command
case object Clear extends Command
case object Start extends Command
case object When extends Command
case object Tags extends Command
case object Exit extends Command
case object Help extends Command
case object Info extends Command
case object AllRepos extends Command
case object NoCommand extends Command
case object Bad extends Command

object Commands {
  val download = "download"
  val set = "set"
  val open = "open"
  val compile = "compile"
  val run = "run"
  val shell = ":sh"
  val go = "go"
  val next = "next"
  val prev = "prev"
  val previous = "previous"
  val ls = "ls"
  val all = "all"
  val clear = "clear"
  val info = "info"
  val when = "when"
  val tags = "tags"
  val exit = "exit"
  val help = "help"
  val list = "list"
  val cpall = "cpall"
}


class CommandParser extends JavaTokenParsers {
  def download: Parser[Command] = Commands.download~>".*".r^^(Download(_))
  def set: Parser[Command] = Commands.set~>".*".r^^(Set(_))
  def open: Parser[Command] = Commands.open~>".*".r^^(Open(_))
  def compile: Parser[Command] = Commands.compile^^((x) => Compile)
  def run: Parser[Command] = Commands.run~>".*".r^^(Run(_))
  def shell: Parser[Command] = Commands.shell~>".*".r^^(Shell(_))
  def go: Parser[Command] = Commands.go~>"\\d+".r^^((x) => Go(x.toInt))
  def nextSteps: Parser[Command] = Commands.next~>"\\d+".r^^(
      (x) => Next(x.toInt))
  def next: Parser[Command] = Commands.next^^((x) => Next(1))
  def prevSteps: Parser[Command] = (Commands.prev~>"\\d+".r | 
      Commands.previous~>"\\d+".r )^^((x) => Previous(x.toInt))
  def prev: Parser[Command] = (Commands.prev | 
      Commands.previous)^^((x) => Previous(1))
  def ls: Parser[Command] = Commands.ls^^((x) => Ls)
  def all: Parser[Command] = Commands.all~>".*".r^^(ApplyToAll(_)) 
  def cpall: Parser[Command] = 
    Commands.cpall~>"[^ \n\r\t]*".r~"[^ \n\r\t]".r^^({
      case a~b => CpAll(a, b)
    })
  def info: Parser[Command] = Commands.info^^((x) => Info)
  def when: Parser[Command] = Commands.when^^((x) => When)
  def tags: Parser[Command] = Commands.tags^^((x) => Tags)
  def exit: Parser[Command] = Commands.exit^^((x) => Exit)
  def help: Parser[Command] = Commands.help^^((x) => Help)
  def list: Parser[Command] = Commands.list^^((x) => AllRepos)
  def clear: Parser[Command] = Commands.clear^^((x) => Clear)
  def bad: Parser[Command] = ".*".r^^((x) => Bad)

  def parse: Parser[Command] = 
    (download | open | all | set | compile | run | shell | when | go | 
      nextSteps | cpall | next | prevSteps  | prev | exit | help | info | 
      list | tags | ls | clear | bad)


  def parseIt(str: String): Command = {
    val r = parseAll(parse, str)
    r.get
  }
}


class Interpreter { 

  // var ttyConfig = ""

  private val sp = File.separator

  private val reader = new ConsoleReader

  reader.setPrompt("command> ")
  private val completers = new StringsCompleter(Commands.download, Commands.set, 
                                Commands.open, Commands.compile, Commands.run, 
                                Commands.go, Commands.next, Commands.previous, 
                                Commands.ls, Commands.all, Commands.info, 
                                Commands.when, Commands.tags, Commands.exit, 
                                Commands.help, Commands.list, Commands.shell,
                                Commands.clear, Commands.cpall)

  reader.addCompleter(completers)

  private val parser = new CommandParser

  private def dumb(o: OutputStream) = {}
  private def read(in: InputStream) = {
    var lines = Source.fromInputStream(in).getLines().mkString("\n")
    println(lines)
  }

  private val pio = new ProcessIO(dumb, read, read)


  private def readCommand: Command = {
    
    val input = reader.readLine()
    parser.parseIt(input)
  }

  private def interpret(command: Command,
                repos: Map[Int, String],
                offset: Int,
                homework: String): Result = {
    command match {
      case Download(hw) =>
        repos.foreach((x) => {
          println(s"Checking out: ${x._2}...")
          s"""git -C ${x._2} fetch --tags""".run(pio).exitValue
          s"""git -C ${x._2} pull""".run(pio).exitValue
          s"""git --git-dir=${x._2}/.git 
            --work-tree=${x._2} checkout tags/${hw}""".run(pio).exitValue
        })
        interpret(NoCommand, repos, offset, hw)
      case Set(hw) =>
        repos.foreach((x) => {
          println(s"Checking out: ${x._2}...")
          s"""git --git-dir=${x._2}/.git 
            --work-tree=${x._2} checkout tags/${hw}""".run(pio).exitValue
        })
        interpret(NoCommand, repos, offset, hw)
    case Clear =>
        "clear".!
        interpret(NoCommand, repos, offset, homework)
      case AllRepos =>
        println("Available repositories")
        repos.foreach((x) => if(x._1 == offset) {
            println(s"[${x._1}]: ${x._2}")
          } else {
            println(s"${x._1}: ${x._2}")
          })
        interpret(NoCommand, repos, offset, homework)
      case CpAll(s, d) =>
        repos.foreach((x) => {
          s"""mv ${s} ${x}/${d}""".run(pio).exitValue
        })
        interpret(NoCommand, repos, offset, homework)
      case Go(x) if x < 0 || x >= repos.size =>
        println("Error: cannot go there")
        interpret(NoCommand, repos, offset, homework)
      case Go(x) =>
        interpret(NoCommand, repos, x, homework)
      case Next(x) if (offset + x) >= repos.size =>
        println("Error: cannot go there, too ahead")
        interpret(NoCommand, repos, offset, homework)
      case Next(x) =>
        interpret(NoCommand, repos, offset + x, homework)
      case Previous(x) if (offset - x) < 0 =>
        println("Error: cannot go there, too behind")
        interpret(NoCommand, repos, offset, homework)
      case Previous(x) =>
        interpret(NoCommand, repos, offset - x, homework)
      case NoCommand => 
        interpret(readCommand, repos, offset, homework)
      case Start =>
        interpret(NoCommand, repos, offset, homework)
      case Ls =>
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            s"ls -al ${x}${sp}${homework}".run(pio).exitValue
        }
        interpret(NoCommand, repos, offset, homework)
      case Info =>
        repos.get(offset) match {
          case None =>
            println("Bad position")
          case Some(x) => println(x)
        }
        interpret(NoCommand, repos, offset, homework)
      case Help =>
        help()
        interpret(NoCommand, repos, offset, homework)
      case Exit => 
        checkoutMaster(repos)
        Success
      case Compile =>
        interpret(NoCommand, repos, offset, homework)
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            s"ghc ${x}${sp}${homework}${sp}*.hs".run(pio).exitValue
        }
        interpret(NoCommand, repos, offset, homework)
      case Run(file) =>
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            s"${x}${sp}${homework}${sp}${file}".run(pio).exitValue
        }
        interpret(NoCommand, repos, offset, homework)
      case Shell(command) =>
        s"""${command}""".run(pio).exitValue
        interpret(NoCommand, repos, offset, homework)
      case When =>
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            s"git -C ${x} log -1 --format=%ai tags/${homework}".run(pio).exitValue
        }
        interpret(NoCommand, repos, offset, homework)
      case Tags =>
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            s"git -C ${x} tag".run(pio).exitValue
        }
        interpret(NoCommand, repos, offset, homework)
      case Open(file) =>
        repos.get(offset) match {
          case None => 
            println("Bad position")
          case Some(x) =>
            file match {
              case "dir" =>
                s"open ${x}${sp}${homework}".run(pio).exitValue
              case _ =>
                s"open ${x}${sp}${homework}${sp}${file}".run(pio).exitValue
            }
        }
        interpret(NoCommand, repos, offset, homework)
      case ApplyToAll(cmd) =>
        repos.foreach((x) => {
          s"""${cmd}""".run(pio).exitValue
        })
        interpret(NoCommand, repos, offset, homework)
      case Bad =>
        println("Unknown command")
        println(knownCommands)
        interpret(NoCommand, repos, offset, homework)
    }
  }

  private def checkoutMaster(repos: Map[Int, String]): Unit = {
    repos.foreach((x) => {
      println(s"Checking out: ${x._2}...")
      s"""git --git-dir=${x._2}/.git 
        --work-tree=${x._2} checkout master""".run(pio).exitValue
    })
  }

  private val knownCommands = """|Available Commands: 
    | 1- download hw: Pulls all the repositories, and checksout tag hw
    | 2- go pos: Moves the cursor to repository number pos
    | 3- next: Moves to the next repo
    | 4- next stepsInt: Moves stepsInt repoistories forward
    | 5- previous or prev: Moves one repo backward
    | 6- previous stepsInt or prev stepsInt: Moves stepsInt repo backward
    | 7- help: Prints help message
    | 8- exit: Checksout master for all repos, and exits the program
    | 9- open dir: Opens the directory that contains the homework
    | 10- open fileName: Opens the given file in the homework directory
    | 11- list: Lists all available repositories, with their indices
    | 12- ls: Lists all files under the homework directory
    | 13- info: Prints the current repository
    | 14- compile: Compiles all haskell files in the homework directory
    | 15- run fileName: Runs the fileName
    | 16- :sh command: Runs command as a shell command
    | 17- all cmd: Applies shell command (cmd) to all repositories
    | 18- when: prints the time when the tag of the current hw is creatd
    | 19- tags: prints the tags of the current student
    | 20- set hw: checkout hw
    | 21- cpall src dest: copies src to all repositories
    | 22- clear: clears the screen""".stripMargin
    
  private def help(): Unit = {
    println("Grader: Copyright(c) 2014 Amanj Sherwany - http://www.amanj.me")
    println("This program helps with grading assignments\n\n")
    println(knownCommands)
  }


  def start(): Result = {
    interpret(Start, reposMap, 0, "")
  }
}


val repos = new File(".").listFiles.filter((x) => 
    x.isDirectory && !x.getName.startsWith(".")).map(_.getName)
val reposMap = repos.zipWithIndex.foldLeft(TreeMap.empty: 
              TreeMap[Int, String])((z, y) => {
  z + (y._2 -> y._1)
})
val interpreter = new Interpreter
interpreter.start
